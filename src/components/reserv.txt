import React from "react";
import "./Hero.css";
function Hero() {
  return (
    <>
      <div class="hero-section">
        <div class="hero-content">
          <div class="live-indicator">Live</div>
          <h1>Bisofftu cso meeting now</h1>
          <p>for civil society association</p>
          <button>Watch Live at 4:35 AM EST</button>
        </div>

        <div class="video-thumbnail">
          <iframe
            src="https://www.youtube.com/embed/AdDkHmuYWaY"
            title="Video Thumbnail"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
            allowFullScreen
          ></iframe>{" "}
        </div>
        <div class="recent-articles">
        <div>
          <h4>November 19, 2024</h4>
          <p>
            <a href="#">Situation Of Ergent Metting for all CSO</a>
          </p>
        </div>

        <div>
          <h4>November 30, 2024</h4>
          <p>
            <a href="#">Last Finace Report Date warnning</a>
          </p>
        </div>
      </div>
      </div>
   
     
    </>
  );
}

export default Hero;
















import React, { useState } from "react";
import { FaSortAlphaDown, FaSortAlphaUp, FaThLarge, FaList } from "react-icons/fa";

const Csos = () => {
  const [csos, setCsos] = useState([
    {
      id: 1,
      name: "Green Earth Initiative",
      date: "2022-05-15",
      notifications: 1,
      imageUrl: "https://via.placeholder.com/100",
    },
    {
      id: 2,
      name: "Youth for Change",
      date: "2021-11-20",
      notifications: 2,
      imageUrl: "https://via.placeholder.com/100",
    },
    {
      id: 3,
      name: "Health and Wellness Foundation",
      date: "2023-01-10",
      notifications: 0,
      imageUrl: "https://via.placeholder.com/100",
    },
    {
      id: 4,
      name: "Community Builders Network",
      date: "2020-06-25",
      notifications: 1,
      imageUrl: "https://via.placeholder.com/100",
    },
    {
      id: 5,
      name: "Educators United",
      date: "2023-07-05",
      notifications: 3,
      imageUrl: "https://via.placeholder.com/100",
    },
  ]);

  const [filter, setFilter] = useState("alphabet");
  const [searchQuery, setSearchQuery] = useState("");
  const [dateFilter, setDateFilter] = useState({ start: "", end: "" });
  const [displayMode, setDisplayMode] = useState("gallery");

  const handleClick = (id) => {
    const selectedCso = csos.find((cso) => cso.id === id);
    alert(`You clicked on: ${selectedCso.name}`);
  };

  const handleSortChange = (order) => {
    setFilter(order);
    setCsos((prev) =>
      [...prev].sort((a, b) => {
        if (order === "asc") return a.name.localeCompare(b.name);
        if (order === "desc") return b.name.localeCompare(a.name);
        return 0;
      })
    );
  };

  const handleDateFilterChange = (e) => {
    const { name, value } = e.target;
    setDateFilter((prev) => ({ ...prev, [name]: value }));
  };

  const handleSearch = (e) => {
    setSearchQuery(e.target.value);
  };

  const filteredCsos = csos
    .filter((cso) =>
      cso.name.toLowerCase().includes(searchQuery.toLowerCase())
    )
    .filter((cso) => {
      const startDate = dateFilter.start ? new Date(dateFilter.start) : new Date(0);
      const endDate = dateFilter.end ? new Date(dateFilter.end) : new Date();
      const csoDate = new Date(cso.date);
      return csoDate >= startDate && csoDate <= endDate;
    });

  const toggleDisplayMode = () => {
    setDisplayMode((prev) => (prev === "gallery" ? "list" : "gallery"));
  };

  return (
    <div className="p-6 mx-auto max-w-6xl bg-gray-100 rounded-lg shadow-lg">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-3xl font-bold text-gray-700">Civic Society Organizations</h2>
      </div>

      {/* Filters Section */}
      <div className="flex flex-col sm:flex-row justify-between items-center mb-4 space-y-4 sm:space-y-0">
        <div className="flex items-center space-x-4">
          <label className="text-gray-700 font-medium">
            Sort By:
            <div className="flex space-x-2 items-center ml-2">
              <button onClick={() => handleSortChange("asc")}>
                <FaSortAlphaDown className="text-xl text-gray-600" />
              </button>
              <button onClick={() => handleSortChange("desc")}>
                <FaSortAlphaUp className="text-xl text-gray-600" />
              </button>
            </div>
          </label>
        </div>

        <div className="flex space-x-4 items-center">
          <label className="text-gray-700 font-medium">
            Date Range:
            <input
              type="date"
              name="start"
              value={dateFilter.start}
              onChange={handleDateFilterChange}
              className="p-2 border rounded-md shadow-sm focus:ring focus:ring-blue-200 w-36"
            />
            <span className="mx-2">to</span>
            <input
              type="date"
              name="end"
              value={dateFilter.end}
              onChange={handleDateFilterChange}
              className="p-2 border rounded-md shadow-sm focus:ring focus:ring-blue-200 w-36"
            />
          </label>
        </div>

        <input
          type="text"
          value={searchQuery}
          onChange={handleSearch}
          placeholder="Search by name"
          className="px-4 py-2 border rounded-md shadow-sm focus:ring focus:ring-blue-200 w-36 "
        />
      </div>

      {/* Display Mode Toggle */}
      <div className="flex justify-end items-center mb-4">
        <button
          onClick={toggleDisplayMode}
          className="p-2 text-2xl rounded-full border shadow-md hover:bg-gray-200 transition-colors"
          title={`Switch to ${displayMode === "gallery" ? "List View" : "Gallery View"}`}
        >
          {displayMode === "gallery" ? (
            <FaList className="text-gray-700" />
          ) : (
            <FaThLarge className="text-gray-700" />
          )}
        </button>
      </div>

      {/* Displaying CSOs */}
      <div
        className={`${
          displayMode === "gallery"
            ? "grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6"
            : "space-y-4"
        }`}
      >
      {filteredCsos.length > 0 ? (
  filteredCsos.map((cso) => (
    <div
      key={cso.id}
      className={`relative ${
        displayMode === "gallery"
          ? "cursor-pointer bg-white border border-gray-200 rounded-lg shadow-sm hover:bg-gray-50 hover:shadow-md p-4"
          : "flex items-center p-4 border border-gray-200 rounded-lg bg-white shadow-sm space-x-4"
      }`}
      onClick={() => handleClick(cso.id)}
    >
      {cso.notifications > 0 && (
        <span className="absolute top-1 right-1 bg-red-500 text-white text-xs font-bold rounded-full h-6 w-6 flex items-center justify-center">
          {cso.notifications}
        </span>
      )}
      <img
        src={cso.imageUrl}
        alt={cso.name}
        className={`${
          displayMode === "gallery" ? "w-20 h-20 rounded-full object-cover mb-3" : "w-16 h-16 rounded-full object-cover"
        }`}
      />
      <div>
        <div className="text-xl font-medium text-gray-700">{cso.name}</div>
        <div className="text-sm text-gray-500">
          Registered on: {new Date(cso.date).toLocaleDateString()}
        </div>
      </div>
    </div>
  ))
) : (
  <div className="text-gray-500 text-center">No CSOs found matching your criteria.</div>
)}

      </div>
    </div>
  );
};

export default Csos;
